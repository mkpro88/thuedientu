var ddtabmenu = {
    disabletablinks: false, //Disable hyperlinks in 1st level tabs with sub contents (true or false)?
    snap2original: [true, 300], //Should tab revert back to default selected when mouse moves out of menu? ([true/false, delay_millisec]

    currentpageurl: window.location.href.replace("http://" + window.location.hostname, "").replace(/^\//, ""), //get current page url (minus hostname, ie: http://www.dynamicdrive.com/)

    definemenu: function(tabid, dselected) {
        this[tabid + "-menuitems"] = null
        this[tabid + "-dselected"] = -1
        this.addEvent(window, function() { ddtabmenu.init(tabid, dselected) }, "load")
    },

    showsubmenu: function(tabid, targetitem) {
        var menuitems = this[tabid + "-menuitems"]
        this.clearrevert2default(tabid)
        var n18 = menuitems.length;
        for (i = 0; i < n18; i++) {
            menuitems[i].className = ""
            if (typeof menuitems[i].hasSubContent != "undefined")
                document.getElementById(menuitems[i].getAttribute("rel")).style.display = "none"
        }
        targetitem.className = "current"
        if (typeof targetitem.hasSubContent != "undefined")
            document.getElementById(targetitem.getAttribute("rel")).style.display = "block"
    },

    isSelected: function(menuurl) {
        var menuurl = menuurl.replace("http://" + menuurl.hostname, "").replace(/^\//, "")
        return (ddtabmenu.currentpageurl == menuurl)
    },

    isContained: function(m, e) {
        var e = window.event || e
        var c = e.relatedTarget || ((e.type == "onclick") ? e.fromElement : e.toElement)
        while (c && c != m) try { c = c.parentNode } catch (e) { c = m }
        if (c == m)
            return true
        else
            return false
    },

    revert2default: function(outobj, tabid, e) {
        if (!ddtabmenu.isContained(outobj, tabid, e)) {
            window["hidetimer_" + tabid] = setTimeout(function() {
                ddtabmenu.showsubmenu(tabid, ddtabmenu[tabid + "-dselected"])
            }, ddtabmenu.snap2original[1])
        }
    },

    clearrevert2default: function(tabid) {
        if (typeof window["hidetimer_" + tabid] != "undefined")
            clearTimeout(window["hidetimer_" + tabid])
    },

    addEvent: function(target, functionref, tasktype) { //assign a function to execute to an event handler (ie: onunload)
        var tasktype = (window.addEventListener) ? tasktype : "on" + tasktype
        if (target.addEventListener)
            target.addEventListener(tasktype, functionref, false)
        else if (target.attachEvent)
            target.attachEvent(tasktype, functionref)
    },

    init: function(tabid, dselected) {
        if (document.getElementById(tabid) != null)///Added
        {
            var menuitems = document.getElementById(tabid).getElementsByTagName("a")
            this[tabid + "-menuitems"] = menuitems
            var n19 = menuitems.length;
            for (var x = 0; x < n19; x++) {
                if (menuitems[x].getAttribute("rel")) {
                    this[tabid + "-menuitems"][x].hasSubContent = true
                    if (ddtabmenu.disabletablinks)
                        menuitems[x].onclick = function() { return false }
                    if (ddtabmenu.snap2original[0] == true) {
                        var submenuEpay = document.getElementById(menuitems[x].getAttribute("rel"))
                       /* menuitems[x].onmouseout = function(e) { ddtabmenu.revert2default(submenu, tabid, e) }*/
                        submenuEpay.onmouseover = function() { ddtabmenu.clearrevert2default(tabid) }
                        /*submenu.onmouseout = function(e) { ddtabmenu.revert2default(this, tabid, e) }*/
                    }
                }
                else //for items without a submenu, add onMouseout effect
                    menuitems[x].onmouseout = function(e) { this.className = ""; if (ddtabmenu.snap2original[0] == true) ddtabmenu.revert2default(this, tabid, e) }
                menuitems[x].onclick = function() { ddtabmenu.showsubmenu(tabid, this) }
                if (dselected == "auto" && typeof setalready == "undefined" && this.isSelected(menuitems[x].href)) {
                    ddtabmenu.showsubmenu(tabid, menuitems[x])
                    this[tabid + "-dselected"] = menuitems[x]
                    var setalready = true
                }
                else if (parseInt(dselected) == x) {
                    ddtabmenu.showsubmenu(tabid, menuitems[x])
                    this[tabid + "-dselected"] = menuitems[x]
                }
            }
        } //Added
    }
}


//SYNTAX: ddtabmenu.definemenu("tab_menu_id", integer OR "auto")
ddtabmenu.definemenu("ddtabs1", 0) //initialize Tab Menu #1 with 1st tab selected
ddtabmenu.definemenu("ddtabs2", 1) //initialize Tab Menu #2 with 2nd tab selected
ddtabmenu.definemenu("ddtabs3", 2) //initialize Tab Menu #3 with 3rd tab selected
ddtabmenu.definemenu("ddtabs4", 3) //initialize Tab Menu #4 with 4th tab selected
ddtabmenu.definemenu("ddtabs5", 4) //initialize Tab Menu #5 with 5th tab selected
ddtabmenu.definemenu("ddtabs6", 5) //initialize Tab Menu #6 with 6th tab selected

	var arrayOfRolloverClasses = new Array();
	var arrayOfClickClasses = new Array();
	var activeRow = false;
	var activeRowClickArray = new Array();
	
	function highlightTableRow()
	{
		var tableObj = this.parentNode;
		if(tableObj.tagName!='TABLE')tableObj = tableObj.parentNode;

		if(this!=activeRow){
			this.setAttribute('origCl',this.className);
			this.origCl = this.className;
		}
		this.className = arrayOfRolloverClasses[tableObj.id];
		
		activeRow = this;
		
	}
	
	function clickOnTableRow()
	{
		var tableObj = this.parentNode;
		if(tableObj.tagName!='TABLE')tableObj = tableObj.parentNode;		
		
		if(activeRowClickArray[tableObj.id] && this!=activeRowClickArray[tableObj.id]){
			activeRowClickArray[tableObj.id].className='';
		}
		this.className = arrayOfClickClasses[tableObj.id];
		
		activeRowClickArray[tableObj.id] = this;
				
	}
	
	function resetRowStyle()
	{
		var tableObj = this.parentNode;
		if(tableObj.tagName!='TABLE')tableObj = tableObj.parentNode;

		if(activeRowClickArray[tableObj.id] && this==activeRowClickArray[tableObj.id]){
			this.className = arrayOfClickClasses[tableObj.id];
			return;	
		}
		
		var origCl = this.getAttribute('origCl');
		if(!origCl)origCl = this.origCl;
		this.className=origCl;
		
	}
		
	function addTableRolloverEffect(tableId,whichClass,whichClassOnClick)
	{
		arrayOfRolloverClasses[tableId] = whichClass;
		arrayOfClickClasses[tableId] = whichClassOnClick;

		var tableObj = document.getElementById(tableId);
		if (tableObj != null) {
		    var tBody = tableObj.getElementsByTagName('TBODY');
		    if (tBody) {
		        var rows = tBody[0].getElementsByTagName('TR');
		    } else {
		        var rows = tableObj.getElementsByTagName('TR');
		    }
		    var n20 = rows.length;
		    for (var no = 0; no < n20; no++) {
		        rows[no].onmouseover = highlightTableRow;
		        rows[no].onmouseout = resetRowStyle;

		        if (whichClassOnClick) {
		            rows[no].onclick = clickOnTableRow;
		        }
		    }
		}
		
	}